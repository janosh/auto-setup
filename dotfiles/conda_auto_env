#!/bin/zsh

# Automatically activates conda environments when entering directories
# containing a conda environment file. The file must be named one of
#   - env(ironment).y(a)ml
#   - requirements.y(a)ml
# If the env doesn't exist yet, it will be created automatically.
# The env will be deactivated again when exciting the directory.

# Installation: Copy chpwd() to .zshrc or save the whole script as a file
# and source it in .zshrc, e.g. by placing it in /usr/local/bin or by
# symlinking conda_auto_env there and then adding `source conda_auto_env`.

# chpwd is a zsh hook function that is executed whenever the current working directory
# is changed (http://zsh.sourceforge.net/Doc/Release/Functions.html#Hook-Functions).
# When using bash, use the environment variable `PROMPT_COMMAND` instead.
# Not sure though if this has performance implications since it runs on every
# prompt (even empty ones), not just directory changes. Plus this makes it impossible
# to change to a different conda env while you're in a directory with an
# env file since bash will always auto-change back to that file's env.
chpwd() {
  # On Linux replace `find -E` with `f -regextype posix-extended`.
  FILE="$(find -E . -maxdepth 1 -regex '.*(env(ironment)?|requirements)\.ya?ml' -print -quit)"
  if [[ -e $FILE ]]; then
    ENV=$(sed -n 's/name: //p' $FILE)
    # Check if env is already active.
    if [[ $CONDA_DEFAULT_ENV != $ENV ]]; then
      conda activate $ENV
      # If env activation is unsuccessful, create a new conda env from file.
      if [ $? -ne 0 ]; then
        echo "Conda environment '$ENV' doesn't exist. Creating it now."
        conda env create -f $FILE
        conda activate $ENV
      fi
      CONDA_ENV_ROOT="$(pwd)"
    fi
  # Deactivate env when exciting the env file's directory.
  elif [[ $PATH = */envs/* ]]\
    && [[ $(pwd) != $CONDA_ENV_ROOT ]]\
    && [[ $(pwd) != $CONDA_ENV_ROOT/* ]]
  then
    CONDA_ENV_ROOT=""
    conda deactivate
  fi
}

# Execute chpwd on shell init.
chpwd